#BEGIN HEADER
ARG ALPINE_VERSION=${ALPINE_VERSION}
ARG BASE_IMAGE=alpine:${ALPINE_VERSION}
#####################################
FROM ${BASE_IMAGE} as set-initial-env
#####################################
RUN echo $PWD
ARG NO_CACHE=${NO_CACHE}
ARG LIBS=${LIBS}
ARG VERBOSE=${VERBOSE}
ENV VERBOSE=${VERBOSE}

ARG PASSWORD=${PASSWORD}

ARG GIT_REPO_NAME=${GIT_REPO_NAME}
ENV GIT_REPO_NAME=${GIT_REPO_NAME}

ARG STATOSHI_DATA=${STATOSHI_DATA}
ENV STATOSHI_DATA=${STATOSHI_DATA}

#USER CONFIG
ARG HOST_UID=${HOST_UID:-4000}
ARG HOST_USER=${HOST_USER:-nodummy}
ENV HOST_USER=${HOST_USER:-nodummy}

USER root

COPY . /home/${HOST_USER}/${PROJECT_NAME}
RUN apk add ${VERBOSE} ${NO_CACHE} shadow

RUN [ "${HOST_USER}" == "root" ] || \
    #(adduser -S -h /home/${HOST_USER} -D -u ${HOST_UID} ${HOST_USER} \
    (adduser -S -h /home/${HOST_USER} -u ${HOST_UID} ${HOST_USER} \
    #&& usermod ${HOST_USER} -G <some group> \
    && chown -R "${HOST_UID}:${HOST_UID}" /home/${HOST_USER} \
    && chown -R "${HOST_UID}:${HOST_UID}" /home/${HOST_USER}/${PROJECT_NAME} \
    )

RUN mkdir -p /usr/local/include/
#REF: https://stackoverflow.com/questions/49955097/how-do-i-add-a-user-when-im-using-alpine-as-a-base-image
#REF: https://wiki.alpinelinux.org/wiki/Setting_up_a_new_user
RUN echo ${HOST_USER}:${PASSWORD} | chpasswd
RUN echo root:${PASSWORD} | chpasswd
RUN echo "${HOST_USER} ALL=(ALL) ALL" >> /etc/sudoers
RUN echo         "root ALL=(ALL) ALL" >> /etc/sudoers
#REF https://github.com/sudo-project/sudo/issues/42#issuecomment-659253293
RUN echo "Set disable_coredump false" >> /etc/sudo.conf

RUN echo ${USER}

RUN apk update && apk upgrade && apk add ${VERBOSE} ${NO_CACHE} \
musl busybox bash-completion git ${LIBS}
WORKDIR /home/${HOST_USER}/${PROJECT_NAME}
RUN ls -a
RUN ./config.statoshi
RUN ./install.statoshi

#RUN apk -U add ${VERBOSE} ${NO_CACHE} coreutils
#RUN apk add --update ${VERBOSE} ${NO_CACHE} nodejs nodejs-npm

#NOTE: simply exposing the ports in the dockerfile isnt enough
#REF:  https://www.ctl.io/developers/blog/post/docker-networking-rules
ARG PUBLIC_PORT=${PUBLIC_PORT}
EXPOSE ${PUBLIC_PORT} 2003-2004 2013-2014 2023-2024 3000 8080 8118 8333 8332 18333 8125 8125/udp 8126 9050 9051
RUN git config --global advice.detachedHead false

RUN df -H
#########################################
FROM set-initial-env as apk-add-packages1
#########################################

WORKDIR /

RUN apk add ${VERBOSE} ${NO_CACHE} \
    autoconf \
    automake \
    binutils \
    ca-certificates \
    cmake \
    curl \
    doxygen \
    git \
    libtool \
    make \
    patch \
    pkgconfig \
    python3 \
    py3-psutil \
    vim

RUN apk add ${VERBOSE} ${NO_CACHE} \
    g++ \
    build-base \
    boost-libs \
    libgcc \
    libstdc++ \
    musl \
    boost-system \
    boost-build \
    boost-dev \
    openssl-dev \
    libevent-dev \
    libzmq \
    zeromq-dev \
    protobuf-dev \
    linux-headers \
    libbz2 \
    libcap-dev \
    librsvg \
    tiff-tools \
    zlib-dev \
    py3-setuptools

RUN df -H
###########################################
FROM apk-add-packages1 as apk-add-packages2
###########################################

RUN apk add ${VERBOSE} ${NO_CACHE} \
      cairo \
      collectd \
      collectd-disk \
      collectd-nginx \
      findutils \
      librrd \
      logrotate \
      memcached \
      nginx \
      nodejs \
      npm \
      nodejs-npm \
      py3-pyldap \
      redis \
      runit \
      sqlite \
      expect \
      dcron \
      py3-mysqlclient \
      mysql-dev \
      mysql-client \
      postgresql-dev \
      postgresql-client \
      iptables \
 && rm -rf \
#TODO: SSL
      /etc/nginx/conf.d/default.conf \ 
 && mkdir -p \
      /var/log/carbon \
      /var/log/graphite

RUN df -H
###########################################
FROM apk-add-packages2 as apk-add-packages3
###########################################

RUN apk add ${VERBOSE} ${NO_CACHE} \
      alpine-sdk \
      git \
      libffi-dev \
      pkgconfig \
      py3-cairo \
      py3-pip \
      py3-virtualenv==16.7.8-r0 \
      openldap-dev \
      python3-dev \
      rrdtool-dev \
      wget

RUN df -H
#################################
FROM apk-add-packages3 as config1
#################################

RUN virtualenv /opt/graphite \
 && . /opt/graphite/bin/activate \
 && pip3 install \
      django==2.2.18 \
      django-statsd-mozilla \
      fadvise \
      gunicorn==20.0.4 \
      msgpack-python \
      redis \
      rrdtool \
      python-ldap \
      mysqlclient \
      psycopg2 \
      twisted \
      django-cockroachdb==2.2.*

RUN df -H
#######################
FROM config1 as config2
#######################

# install whisper
ARG WHISPER_VERSION=${WHISPER_VERSION}
ARG whisper_repo=https://github.com/graphite-project/whisper.git
RUN git clone -b ${WHISPER_VERSION} --depth 1 ${whisper_repo} /usr/local/src/whisper \
 && cd /usr/local/src/whisper \
 && . /opt/graphite/bin/activate \
 && python3 ./setup.py install

# install carbon
ARG CARBON_VERSION=${CARBON_VERSION}
ARG carbon_repo=https://github.com/graphite-project/carbon.git
RUN . /opt/graphite/bin/activate \
 && git clone -b ${CARBON_VERSION} --depth 1 ${carbon_repo} /usr/local/src/carbon \
 && cd /usr/local/src/carbon \
 && pip3 install -r requirements.txt \
 && python3 ./setup.py install

# install graphite
ARG GRAPHITE_VERSION=${GRAPHITE_VERSION}
ARG graphite_repo=https://github.com/graphite-project/graphite-web.git
RUN . /opt/graphite/bin/activate \
 && git clone -b ${GRAPHITE_VERSION} --depth 1 ${graphite_repo} /usr/local/src/graphite-web \
 && cd /usr/local/src/graphite-web \
 && pip3 install -r requirements.txt \
 && python3 ./setup.py install

# install statsd (as we have to use this ugly way)
ARG STATSD_VERSION=${STATSD_VERSION}
ARG statsd_repo=https://github.com/statsd/statsd.git
WORKDIR /opt
RUN git clone "${statsd_repo}" \
 && cd /opt/statsd \
 && git checkout tags/v"${STATSD_VERSION}" \
 && npm install

RUN df -H
#######################
FROM config2 as config3
#######################
#TODO Why?
COPY conf/opt/graphite/conf/                             /opt/defaultconf/graphite/
COPY conf/opt/graphite/webapp/graphite/local_settings.py /opt/defaultconf/graphite/local_settings.py
#COPY conf/opt/graphite/webapp/graphite/local_settings.py /opt/defaultconf/graphite/settings.py
#TODO Why?
# config graphite
COPY conf/opt/graphite/conf/*.conf /opt/graphite/conf/
COPY conf/opt/graphite/webapp/graphite/local_settings.py /opt/graphite/webapp/graphite/local_settings.py
#COPY conf/opt/graphite/webapp/graphite/local_settings.py /opt/graphite/webapp/graphite/settings.py
WORKDIR /opt/graphite/webapp
RUN mkdir -p /var/log/graphite/ \
  && PYTHONPATH=/opt/graphite/webapp /opt/graphite/bin/django-admin.py collectstatic --noinput --settings=graphite.settings

# config statsd
COPY conf/opt/statsd/config/ /opt/defaultconf/statsd/config/

RUN df -H
#######################
FROM config3 as config4
#######################

ENV STATSD_INTERFACE udp
#TODO Why?
#ENV STATSD_INTERFACE tcp/udp

COPY conf /

# copy /opt from build image
COPY --from=config3 /opt /opt

VOLUME ["/opt/graphite/conf", "/opt/graphite/storage", "/opt/graphite/webapp/graphite/functions/custom", "/etc/nginx", "/opt/statsd/config", "/etc/logrotate.d", "/var/log", "/var/lib/redis", "/home/root/.bitcoin","/home/root/.statoshi", "/home/${USER}/.bitcoin","/home/${USER}/.statoshi"]

RUN df -H
#######################
FROM config4 as config-final
#######################
STOPSIGNAL SIGHUP

#################
#################
#################
#################
#################
#
#TODO better consue
ARG THIS_FILE PROJECT_NAME GIT_SERVER DOCKERFILE BITCOIN_DATA CMD_ARGUMENTS PWD Makefile GIT_REPO_ORIGIN TIME SERVICE_TARGET GIT_USER_NAME GIT_USER_EMAIL GIT_PROFILE GIT_REPO_PATH DOCKERFILE_PATH BITCOIN_CONF
#
#END HEADER
#BEGIN INSERT

