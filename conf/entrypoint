#!/bin/bash -e

export LC_ALL=C

su-exec root /run-grafana.sh &

BITCOIND=/usr/bin/bitcoind
if test -f "$BITCOIND"; then
   /usr/bin/./bitcoind -daemon -prune=550 &
fi
#TODO hijack entrypoint for more bitcoin functionality
##!/bin/sh
#set -e
#
#if [ $(echo "$1" | cut -c1) = "-" ]; then
#echo "$0: assuming arguments for bitcoind"
#
#set -- bitcoind "$@"
#fi
#
#if [ $(echo "$1" | cut -c1) = "-" ] || [ "$1" = "bitcoind" ]; then
#mkdir -p "$BITCOIN_DATA"
#chmod 700 "$BITCOIN_DATA"
#chown -R bitcoin "$BITCOIN_DATA"
#
#echo "$0: setting data directory to $BITCOIN_DATA"
#
#set -- "$@" -datadir="$BITCOIN_DATA"
#fi
#
#if [ "$1" = "bitcoind" ] || [ "$1" = "bitcoin-cli" ] || [ "$1" = "bitcoin-tx" ]; then
#echo
#exec su-exec bitcoin "$@"
#fi
#
##echo
##exec "$@"

#!/bin/sh

## Inspired from the script found at
##   https://sanjeevan.co.uk/blog/running-services-inside-a-container-using-runit-and-alpine-linux/

shutdown() {
  echo "shutting down container"

  # first shutdown any service started by runit
  for _srv in $(ls -1 /etc/service); do
    sv force-stop $_srv
  done

  echo "shutting down runsvdir"

  # shutdown runsvdir command
  kill -HUP $RUNSVDIR
  wait $RUNSVDIR

  # give processes time to stop
  sleep 0.5

  echo "killing rest processes"
  # kill any other processes still running in the container
  for _pid  in $(ps -eo pid | grep -v PID  | tr -d ' ' | grep -v '^1$' | head -n -6); do
    timeout -t 5 /bin/sh -c "kill $_pid && wait $_pid || kill -9 $_pid"
  done
  exit
}

. /opt/graphite/bin/activate

PATH="${PATH}:/usr/local/bin"

# run all scripts in the run_once folder
[ -d /etc/run_once ] && /bin/run-parts /etc/run_once

## check services to disable
for _srv in $(ls -1 /etc/service); do
    eval X=$`echo -n $_srv | tr [:lower:]- [:upper:]_`_DISABLED
    [ -n "$X" ] && touch /etc/service/$_srv/down
done

# remove stale pids
find /opt/graphite/storage -maxdepth 1 -name '*.pid' -delete

# chmod logrotate file (#111)
chmod 0644 /etc/logrotate.d/*

exec runsvdir -P /etc/service &
RUNSVDIR=$!
echo "Started runsvdir, PID is $RUNSVDIR"
echo "wait for processes to start...."

sleep 5
for _srv in $(ls -1 /etc/service); do
    sv status $_srv
done

# catch shutdown signals
trap shutdown SIGTERM SIGHUP SIGQUIT SIGINT
wait $RUNSVDIR

shutdown
