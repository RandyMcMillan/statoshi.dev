{
  "name": "Statoshi",
  "tagline": "Realtime Bitcoin Node Statistics",
  "body": "![Statoshi](http://lopp.net/images/statoshi.png)\r\n# Installation and Dependencies\r\n_NOTE: This guide has only been tested on Ubuntu; if you run into issues installing, please contact @jlopp_\r\n\r\n1) Install [node.js](http://nodejs.org/download/)\r\n\r\n2) Install [Forever](http://blog.nodejitsu.com/keep-a-nodejs-server-up-with-forever/)\r\n    sudo npm install forever\r\n\r\n3) Install [StatsD](https://github.com/etsy/statsd).\r\n\r\nCreate a config.js file copied from /opt/statsd/exampleConfig.js; at the minimum it should contain:\r\n\r\n```\r\n    {\r\n        graphitePort: 2003\r\n        , graphiteHost: \"127.0.0.1\"\r\n        , port: 8125\r\n        , backends: [ \"./backends/graphite\" ]\r\n    }\r\n```\r\n\r\nStart statsd:\r\n    forever start /usr/bin/nodejs /opt/statsd/stats.js /opt/statsd/config.js\r\n\r\n4) [Download](https://httpd.apache.org/download.cgi) and install Apache HTTPD Server. If you’re running Linux, it’s probably easier to install via your package manager.\r\n\r\n5) Install software to visualize the stats collected by StatsD. We recommend [Graphite](http://graphite.wikidot.com/installation). Make sure you install a version newer than 0.9.12 for [maximum Grafana performance.](http://grafana.org/docs/performance/)\r\nFor Graphite, once you have it installed you’ll want to configure how it stores the data from StatsD, in the graphite/conf/storage-schemas.conf:\r\n\r\n    [carbon]\r\n    pattern = ^carbon\\.\r\n    retentions = 10:2160,60:10080,600:262974\r\n    \r\n    [stats]\r\n    priority = 110\r\n    pattern = ^stats\\..*\r\n    retentions = 10:2160,60:10080,600:262974\r\n    \r\n    [default]\r\n    pattern = .*\r\n    retentions = 10:2160,60:10080,600:262974\r\n\r\nTo prevent loss of sparse data you'll also need to modify Graphite's graphite/conf/storage-aggregation.conf:\r\n\r\n    [min]\r\n    pattern = \\.min$\r\n    xFilesFactor = 0.0\r\n    aggregationMethod = min\r\n    \r\n    [max]\r\n    pattern = \\.max$\r\n    xFilesFactor = 0.0\r\n    aggregationMethod = max\r\n    \r\n    [sum]\r\n    pattern = \\.count$\r\n    xFilesFactor = 0.0\r\n    aggregationMethod = sum\r\n    \r\n    [default_average]\r\n    pattern = .*\r\n    xFilesFactor = 0.0\r\n    aggregationMethod = average\r\n\r\nOptional performance improvement: install [memcached](http://www.memcached.org/downloads)\r\n\r\n    sudo apt-get install memcached\r\n\r\nEnabled memcached in /opt/graphite/webapp/graphite/local_settings.py\r\n\r\n    MEMCACHE_HOSTS = ['127.0.0.1:11211']\r\n    DEFAULT_CACHE_DURATION = 600\r\n\r\n6) Download (or git clone) the Statoshi fork:\r\n```\r\n    jameson@lopp:~/workspace/$ git clone https://github.com/jlopp/statoshi.git\r\n    Cloning into ‘statoshi’…\r\n    remote: Reusing existing pack: 35655, done.\r\n    remote: Total 35655 (delta 0), reused 0 (delta 0)\r\n    Receiving objects: 100% (35655/35655), 26.56 MiB | 2.37 MiB/s, done.\r\n    Resolving deltas: 100% (25766/25766), done.\r\n    Checking connectivity… done\r\n```\r\n\r\n7) Compile the project. This can be a bit tricky if it's your first time due to the dependencies; you'll likely want to read the documentation:\r\n* Linux build notes are [here](https://github.com/jlopp/statoshi/blob/master/doc/build-unix.md)\r\n* OSX build notes are [here](https://github.com/jlopp/statoshi/blob/master/doc/build-osx.md)\r\n* Windows build notes are [here](https://github.com/jlopp/statoshi/blob/master/doc/build-msw.md)\r\n\r\nOnce you think you have all of the dependencies installed, build the project. For Linux, the commands are:\r\n```\r\n    jameson@lopp:~/$ cd /path/to/statoshi/\r\n    jameson@lopp:~/workspace/statoshi/$ ./autogen.sh\r\n    jameson@lopp:~/workspace/statoshi/$ ./configure\r\n    jameson@lopp:~/workspace/statoshi/$ make\r\n```\r\n\r\nIt may take 20+ minutes to build, depending upon the speed of your computer. If you’re missing a dependency, you should receive an error noting what is missing.\r\n\r\nNote that the Statoshi project assumes that you are running StatsD on the same machine as your Bitcoin node. If you wish to run StatsD on a different machine or non-default port, you’ll need to edit the default configuration on line 16 of **/statoshi/src/statsd_client.h** before building the project.\r\n\r\n8) Set some values in your bitcoin.conf file; the 'gettxoutsetinfo' command ensures that UTXO metrics get populated after each new block arrives. The same goes for the 'getmininginfo' command. Note that you probably don't want to set the blocknotify command until your node is synced to the chain tip, otherwise it will slow down the node's initial sync.\r\n```\r\nrpcuser=unguessableUser3256\r\nrpcpassword=someRandomPasswordWithEntropyHere\r\nblocknotify=/path/to/bitcoin-cli getmininginfo && sleep 30 && /path/to/bitcoin-cli gettxoutsetinfo\r\n```\r\n\r\n9) Start your Statoshi node (either the GUI or the command line daemon) - the Linux commands for them are:\r\n```\r\n    GUI: /path/to/statoshi/src/qt/bitcoin-qt &\r\n    Daemon: /path/to/statoshi/src/bitcoind &\r\n```\r\nNow you can check out the stats as they roll in to Graphite; you should see graphs begin to be populated within 30 seconds!\r\n\r\n10) If you wish to duplicate the UI on [statoshi.info](http://statoshi.info), you'll also need to install Grafana. You can find [installation instructions here](http://docs.grafana.org/installation/).\r\n\r\nSince Graphite runs on port 3000, you can have Apache proxy requests to it by:\r\n\r\n```\r\n    jameson@lopp:~/$ sudo a2enmod proxy \r\n    jameson@lopp:~/$ sudo a2enmod proxy_http\r\n```\r\n\r\nAdd to apache2.conf:\r\n```\r\n    <VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyRequests Off\r\n    ProxyPass / http://localhost:3000/\r\n    ProxyPassReverse / http://localhost:3000/\r\n    </VirtualHost>\r\n```\r\nRestart Apache: sudo service apache2 restart\r\n\r\nOnce you install Grafana, you can load the dashboards from [statoshi.info](http://statoshi.info) by clicking on the 'settings' icon in the upper left of statoshi.info and selecting \"View JSON.\" Then import the JSON into your own Statoshi instance. The home dashboard is a special case - it can only be modified by updating the json file located at\r\n/usr/share/grafana/public/dashboards/home.json",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}