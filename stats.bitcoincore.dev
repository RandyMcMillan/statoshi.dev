#BEGIN HEADER
ARG BASE_IMAGE=alpine:3.11.6
FROM ${BASE_IMAGE} as set-initial-env
#####################################
ENV FORK=bitcoincore-dev
ENV REPO_NAME=stats.bitcoincore.dev
ENV BRANCH=master
ENV GITHUB_ROOT=https://github.com/bitcoincore-dev/${FORK}/${REPO_NAME}/${BRANCH}

#NOTE: simply exposing the ports in the dockerfile isnt enough
#REF:  https://www.ctl.io/developers/blog/post/docker-networking-rules
EXPOSE 80 2003-2004 2013-2014 2023-2024 3000 8080 8118 8333 8332 18333 8125 8125/udp 8126 9050 9051

#########################################

RUN apk update && apk upgrade
RUN apk add -v \
    alpine-sdk \
    autoconf \
    automake \
    binutils \
    bash-completion \
    boost-build \
    boost-dev \
    boost-libs \
    boost-system \
    build-base \
    busybox \
    ca-certificates \
    cairo \
    cmake \
    collectd \
    collectd-disk \
    collectd-nginx \
    coreutils \
    curl \
    dcron \
    doxygen \
    expect \
    findutils \
    g++ \
    git \
    iptables \
    libbz2 \
    libcap-dev \
    libevent-dev \
    libffi-dev \
    libgcc \
    librrd \
    librsvg \
    libstdc++ \
    libtool \
    libzmq \
    linux-headers \
    logrotate \
    make \
    memcached \
    musl \
    mysql-dev \
    mysql-client \
    nginx \
    nodejs \
    nodejs-npm \
    npm \
    openldap-dev \
    openssl-dev \
    patch \
    pkgconfig \
    postgresql-dev \
    postgresql-client \
    protobuf-dev \
    python3 \
    python3-dev \
    py3-cairo \
    py3-mysqlclient \
    py3-pip \
    py3-psutil \
    py3-pyldap \
    py3-setuptools \
    py3-virtualenv==16.7.8-r0 \
    redis \
    rrdtool-dev \
    runit \
    sqlite \
    tiff-tools \
    vim \
    wget \
    zeromq-dev \
    zlib-dev
#################################
RUN rm -rf /etc/nginx/conf.d/default.conf \
    && mkdir -p \
    /var/log/carbon \
    /var/log/graphite
#TODO: SSL
#########################################
FROM set-initial-env as grafana-download
#########################################

ENV GRAFANA_VERSION=7.0.0
RUN mkdir -p /tmp/grafana \
  && wget -P /tmp/ https://dl.grafana.com/oss/release/grafana-${GRAFANA_VERSION}.linux-amd64.tar.gz \
  && tar xfz /tmp/grafana-${GRAFANA_VERSION}.linux-amd64.tar.gz --strip-components=1 -C /tmp/grafana

########################################
FROM grafana-download as grafana-config
########################################
#REF:https://github.com/orangesys/alpine-grafana/blob/master/Dockerfile

ENV PATH=/usr/share/grafana/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
    GF_PATHS_CONFIG_DEFAULTS="/usr/share/grafana/conf/defaults.ini" \
    GF_PATHS_CONFIG="/etc/grafana/grafana.ini" \
    GF_PATHS_DATA="/var/lib/grafana" \
    GF_PATHS_HOME="/usr/share/grafana" \
    GF_PATHS_HOME_DASHBOARD="/usr/share/grafana/public/dashboards/home.json" \
    GF_PATHS_LOGS="/var/log/grafana" \
    GF_PATHS_PLUGINS="/var/lib/grafana/plugins" \
    GF_PATHS_PROVISIONING="/etc/grafana/provisioning"

######################################
FROM grafana-config as set-grafana-env
######################################

WORKDIR $GF_PATHS_HOME

RUN set -ex \
    && addgroup -S grafana \
    && adduser -S -G grafana grafana \
    #&& apk add --no-cache libc6-compat ca-certificates su-exec bash
    && apk add -v libc6-compat su-exec

#NOTE Once /tmp/grafana is copied to GF_PATHS_HOME we are free to modify the default configuration
COPY --from=grafana-config /tmp/grafana "$GF_PATHS_HOME"
RUN mkdir -p "$GF_PATHS_HOME/.aws" \
    && mkdir -p "$GF_PATHS_PROVISIONING/datasources" \
        "$GF_PATHS_PROVISIONING/dashboards" \
        "$GF_PATHS_PROVISIONING/notifiers" \
        "$GF_PATHS_LOGS" \
        "$GF_PATHS_PLUGINS" \
        "$GF_PATHS_DATA" \
    && chown -R grafana:grafana "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws" "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS" "$GF_PATHS_PROVISIONING" \
    && chmod -R 777 "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws" "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS" "$GF_PATHS_PROVISIONING"

RUN apk add -v git
RUN git clone ${GITHUB_ROOT} --depth 2 ${REPO_NAME}

COPY ${REPO_NAME}/conf/defaults.ini "$GF_PATHS_CONFIG_DEFAULTS"
COPY ${REPO_NAME}/conf/grafana.ini "$GF_PATHS_CONFIG"
COPY ${REPO_NAME}/conf/run-grafana.sh /usr/local/bin/
COPY ${REPO_NAME}/conf/dashboards/overview.json $GF_PATHS_HOME_DASHBOARD
COPY ${REPO_NAME}/conf/datasources/datasources.conf $GF_PATHS_PROVISIONING/datasources/datasources.conf

COPY ${REPO_NAME}/conf/dashboards/overview.conf $GF_PATHS_HOME/dashboards/overview.conf

RUN rm -f $GF_PATHS_HOME/public/img/grafana_icon.svg
RUN rm -f $GF_PATHS_HOME/public/img/grafana_mask_icon.svg

COPY ${REPO_NAME}/src/qt/res/src/bitcoin.svg  $GF_PATHS_HOME/public/img/grafana_icon.svg
COPY ${REPO_NAME}/src/qt/res/src/bitcoin.svg  $GF_PATHS_HOME/public/img/grafana_mask_icon.svg
COPY ${REPO_NAME}/src/qt/res/src/bitcoin.svg  $GF_PATHS_HOME/public/img/bitcoin.svg

#########################################
FROM set-grafana-env as apk-add-packages
#########################################

RUN apk update && apk upgrade
RUN apk add -v \
    alpine-sdk \
    autoconf \
    automake \
    binutils \
    bash-completion \
    boost-build \
    boost-dev \
    boost-libs \
    boost-system \
    build-base \
    busybox \
    ca-certificates \
    cairo \
    cmake \
    collectd \
    collectd-disk \
    collectd-nginx \
    coreutils \
    curl \
    dcron \
    doxygen \
    expect \
    findutils \
    g++ \
    git \
    iptables \
    libbz2 \
    libcap-dev \
    libevent-dev \
    libffi-dev \
    libgcc \
    librrd \
    librsvg \
    libstdc++ \
    libtool \
    libzmq \
    linux-headers \
    logrotate \
    make \
    memcached \
    musl \
    mysql-dev \
    mysql-client \
    nginx \
    nodejs \
    nodejs-npm \
    npm \
    openldap-dev \
    openssl-dev \
    patch \
    pkgconfig \
    postgresql-dev \
    postgresql-client \
    protobuf-dev \
    python3 \
    python3-dev \
    py3-cairo \
    py3-mysqlclient \
    py3-pip \
    py3-psutil \
    py3-pyldap \
    py3-setuptools \
    py3-virtualenv==16.7.8-r0 \
    redis \
    rrdtool-dev \
    runit \
    sqlite \
    tiff-tools \
    vim \
    wget \
    zeromq-dev \
    zlib-dev
#################################
RUN rm -rf /etc/nginx/conf.d/default.conf \
    && mkdir -p \
    /var/log/carbon \
    /var/log/graphite
#TODO: SSL
#################################
FROM apk-add-packages as config1
#################################

RUN virtualenv /opt/graphite \
 && . /opt/graphite/bin/activate \
 && pip3 install \
      django==2.2.12 \
      django-statsd-mozilla \
      fadvise \
      gunicorn==20.0.4 \
      msgpack-python \
      redis \
      rrdtool \
      python-ldap \
      mysqlclient \
      psycopg2 \
      twisted \
      django-cockroachdb==2.2.*

#######################
FROM config1 as config2
#######################

# install whisper
ARG version=1.1.7
ARG whisper_version=${version}
ARG whisper_repo=https://github.com/graphite-project/whisper.git
RUN git clone -b ${whisper_version} --depth 1 ${whisper_repo} /usr/local/src/whisper \
 && cd /usr/local/src/whisper \
 && . /opt/graphite/bin/activate \
 && python3 ./setup.py install

# install carbon
ARG carbon_version=${version}
ARG carbon_repo=https://github.com/graphite-project/carbon.git
RUN . /opt/graphite/bin/activate \
 && git clone -b ${carbon_version} --depth 1 ${carbon_repo} /usr/local/src/carbon \
 && cd /usr/local/src/carbon \
 && pip3 install -r requirements.txt \
 && python3 ./setup.py install

# install graphite
ARG graphite_version=${version}
ARG graphite_repo=https://github.com/graphite-project/graphite-web.git
RUN . /opt/graphite/bin/activate \
 && git clone -b ${graphite_version} --depth 1 ${graphite_repo} /usr/local/src/graphite-web \
 && cd /usr/local/src/graphite-web \
 && pip3 install -r requirements.txt \
 && python3 ./setup.py install

# install statsd (as we have to use this ugly way)
ARG statsd_version=0.8.6
ARG statsd_repo=https://github.com/statsd/statsd.git
WORKDIR /opt
RUN git clone "${statsd_repo}" \
 && cd /opt/statsd \
 && git checkout tags/v"${statsd_version}" \
 && npm install

#######################
FROM config2 as config3
#######################
# config graphite
COPY ${REPO_NAME}/conf/opt/graphite/conf/aggregation-rules.conf       /opt/graphite/conf/aggregation-rules.conf
COPY ${REPO_NAME}/conf/opt/graphite/webapp/graphite/local_settings.py /opt/graphite/webapp/graphite/local_settings.py

WORKDIR /opt/graphite/webapp
RUN mkdir -p /var/log/graphite/ \
  && PYTHONPATH=/opt/graphite/webapp /opt/graphite/bin/django-admin.py collectstatic --noinput --settings=graphite.settings

# config statsd
COPY ${REPO_NAME}/conf/opt/statsd/config/* /opt/defaultconf/statsd/config/

#######################
FROM config3 as config4
#######################

ENV STATSD_INTERFACE udp
#TODO Why?
#ENV STATSD_INTERFACE tcp/udp

# copy /opt from build image
COPY --from=config3 /opt /opt

VOLUME ["/opt/graphite/conf", "/opt/graphite/storage", "/opt/graphite/webapp/graphite/functions/custom", "/etc/nginx", "/opt/statsd/config", "/etc/logrotate.d", "/var/log", "/var/lib/redis", "/home/root/.bitcoin"]

#######################
FROM config4 as config-final
#######################
STOPSIGNAL SIGHUP

#################
#################
#################
#################
#################
#END HEADER
#BEGIN INSERT

#BEGIN statoshi.all
RUN df -H
###########################################
# We build Statoshi last
FROM config-final as clone-stats-bitcoincore-dev
###########################################

# Change to your fork
RUN git clone -b master https://github.com/bitcoincore-dev/stats.bitcoincore.dev --depth 2 /home/root/stats.bitcoincore.dev
WORKDIR /home/root/stats.bitcoincore.dev
#RUN cd /home/root/stats.bitcoincore.dev
#RUN ./conf/usr/local/bin/get-branches.sh
RUN mkdir -p /home/root/stats.bitcoincore.dev/depends/SDKs

################################################
FROM clone-stats-bitcoincore-dev as make-depends
################################################

# Install before autogen.sh and configure
#RUN make -j $(nproc) download -C /home/root/stats.bitcoincore.dev/depends
RUN apk add libzmq
RUN pip3 install pyzmq
RUN python3 /home/root/stats.bitcoincore.dev/contrib/zmq/zmq_sub.py &

############################
FROM make-depends as autogen
############################

RUN cd /home/root/stats.bitcoincore.dev && ./autogen.sh

#########################
FROM autogen as configure
#########################

RUN cd /home/root/stats.bitcoincore.dev  && ./configure --disable-wallet --disable-tests --disable-hardening --disable-man --enable-util-cli --enable-util-tx --with-gui=no --without-miniupnpc --disable-bench

######################
FROM configure as make
######################

RUN cd /home/root/stats.bitcoincore.dev && make -f Makefile -j $(nproc)

###########################
FROM make as strip-binaries
###########################

#RUN strip /stats.bitcoincore.dev/src/bitcoind
#
#RUN strip /stats.bitcoincore.dev/src/bitcoin-cli
#
#RUN strip /stats.bitcoincore.dev/src/bitcoin-tx

###########################
FROM strip-binaries as statoshi
###########################

WORKDIR /home/root/stats.bitcoincore.dev
#RUN install -v conf/usr/local/bin/fastcopy-chaindata.py /usr/local/bin/fastcopy-chaindata.py
#RUN test -d /home/root/.bitcoin && echo Exists || conf/usr/local/bin/fastcopy-chaindata.py /home/root/.bitcoin /home/root/.statoshi

RUN /home/root/stats.bitcoincore.dev/conf/config.bitcoin.conf.sh

# These should be the mounted volume
#TODO mimic the bitcoin package install?
RUN mkdir -p /etc/bitcoin
RUN mkdir -p /var/lib/bitcoin
RUN mkdir -p /root/.bitcoin
RUN mkdir -p /home/root/.bitcoin
RUN ln -s /root/.bitcoin /var/lib/bitcoin
RUN install -v /home/root/stats.bitcoincore.dev/conf/bitcoin.conf /etc/bitcoin/bitcoin.conf
RUN install -v /home/root/stats.bitcoincore.dev/conf/bitcoin.conf /root/.bitcoin/bitcoin.conf
RUN install -v /home/root/stats.bitcoincore.dev/conf/bitcoin.conf /home/root/.bitcoin/bitcoin.conf
RUN install -v /home/root/stats.bitcoincore.dev/conf/additional.conf /etc/bitcoin/additional.conf
RUN install -v /home/root/stats.bitcoincore.dev/conf/additional.conf /root/.bitcoin/additional.conf
RUN install -v /home/root/stats.bitcoincore.dev/conf/additional.conf /home/root/.bitcoin/additional.conf

RUN install -v /home/root/stats.bitcoincore.dev/src/bitcoind /usr/local/bin/bitcoind
RUN install -v /home/root/stats.bitcoincore.dev/src/bitcoind /usr/bin/bitcoind

RUN install -v /home/root/stats.bitcoincore.dev/src/bitcoin-cli /usr/local/bin/bitcoin-cli
RUN install -v /home/root/stats.bitcoincore.dev/src/bitcoin-cli /usr/bin/bitcoin-cli

RUN install -v /home/root/stats.bitcoincore.dev/src/bitcoin-tx /usr/local/bin/bitcoin-tx
RUN install -v /home/root/stats.bitcoincore.dev/src/bitcoin-tx /usr/bin/bitcoin-tx

#RUN install -v /home/root/stats.bitcoincore.dev/conf/usr/local/bin/check_synced.sh /usr/local/bin/checked_synced.sh

###########################
# Micro containers may not be able to compile from source - signed binaries verified here
###########################

RUN apk add --no-cache gnupg
RUN gpg --refresh-keys
RUN gpg --import  /home/root/stats.bitcoincore.dev/conf/usr/local/bin/randymcmillan.asc

RUN while read fingerprint keyholder_name; do gpg --keyserver hkps://keys.openpgp.org --recv-keys ${fingerprint}; done <  /home/root/stats.bitcoincore.dev/conf/usr/local/bin/keys.txt

RUN gpg --verify /home/root/stats.bitcoincore.dev/conf/usr/local/bin/bitcoind.gpg /home/root/stats.bitcoincore.dev/conf/usr/local/bin/bitcoind

RUN gpg --verify /home/root/stats.bitcoincore.dev/conf/usr/local/bin/bitcoin-cli.gpg /home/root/stats.bitcoincore.dev/conf/usr/local/bin/bitcoin-cli

RUN gpg --verify /home/root/stats.bitcoincore.dev/conf/usr/local/bin/bitcoin-tx.gpg /home/root/stats.bitcoincore.dev/conf/usr/local/bin/bitcoin-tx

RUN df -H
#END statoshi.all

#END INSERT
#BEGIN FOOTER
#################
#################
#################
#################
#################


RUN install /home/root/stats.bitcoincore.dev/conf/entrypoint /
RUN install /home/root/stats.bitcoincore.dev/conf/usr/local/bin/systemMetrics.Daemon.py /
RUN install /home/root/stats.bitcoincore.dev/conf/usr/local/bin/requirements.txt /

RUN rm -rf /home/root/stats.bitcoincore.dev

RUN rm -rf /var/cache/man/*
RUN rm -rf /opt/graphite/examples/*

RUN npm --force cache clean # && cd /usr/lib/node_modules && npm uninstall -y npm

#RUN rm -rf /opt/graphite/webapp/content/js/ext/resources/images/default/tabs/*.gif
#RUN rm -rf /opt/graphite/webapp/content/js/ext/resources/images/default/grid/*.gif
#RUN rm -rf /opt/graphite/webapp/content/js/ext/resources/images/default/window/*.gif
#RUN rm -rf /opt/graphite/webapp/content/js/ext/resources/images/default/layout/*.gif
#RUN rm -rf /opt/graphite/webapp/content/js/ext/resources/images/default/toolbar/*.gif
#RUN rm -rf /opt/graphite/webapp/content/js/ext/resources/images/default/button/*.gif
#RUN rm -rf /opt/graphite/webapp/content/js/ext/resources/icons/fam/*.gif
#RUN rm -rf /opt/graphite/webapp/content/img/*.png
#RUN rm -rf /opt/graphite/webapp/content/css/default/*.gif
RUN rm -rf /opt/graphite/examples/*

RUN df -H
CMD ["bitcoind &"]
ENTRYPOINT ["/entrypoint"]
#END FOOTER
