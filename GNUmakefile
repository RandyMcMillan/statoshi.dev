
# The repo may contain a Makefile generated by ./configure
# We include Makefile at the end of this GNUmakefile
# Make searches for this file first first per make default search hierarchy
ifneq ($(Makefile),)
	Makefile := defined
endif

#These are referenced here and docker-compose.yml
DOCKERFILE         := $(notdir $(PWD))
DOCKERFILE_SLIM    := $(notdir $(PWD)).slim
DOCKERFILE_GUI     := $(notdir $(PWD)).gui
DOCKERFILE_EXTRACT := $(notdir $(PWD)).extract

# If you see pwd_unknown showing up, this is why. Re-calibrate your system.
PWD ?= pwd_unknown

# Note the different service configs in  docker-compose.yml.
# We override this default for different build/run configs
SERVICE_TARGET := shell

ifeq ($(user),)
# We force root
HOST_USER := root
HOST_UID  := 0
## USER retrieved from env, UID from shell.
HOST_USER ?= $(strip $(if $(USER),$(USER),nodummy))
HOST_UID  ?=  $(strip $(if $(shell id -u),$(shell id -u),4000))
else
# We force root
#HOST_USER := root
#HOST_UID  := 0
## allow override by adding user= and/ or uid=  (lowercase!).
## uid= defaults to 0 if user= set (i.e. root).
HOST_USER = $(user)
HOST_UID = $(strip $(if $(uid),$(uid),0))
endif

#GITHUB CONFIG
GITHUB_USER_NAME=$(git config user.name)
export GITHUB_USER_NAME
GITHUB_USER_EMAIL=$(git config user.email)
export GITHUB_USER_EMAIL


BITCOIN_DATA  := $(HOME)/.bitcoin
export BITCOIN_DATA
BLOCK_DATA_BAK := $(HOME)/.bitcoin.bak
export STATOSHI_DATA


# PROJECT_NAME defaults to name of the current directory.
# should not need to be changed if you follow GitOps operating procedures.
PROJECT_NAME := $(notdir $(PWD))

THIS_FILE := $(lastword $(MAKEFILE_LIST))
CMD_ARGUMENTS ?= $(cmd)

ifeq ($(did),)
    D_ID   := $(1)
    export D_ID
else
    D_ID   ?= $(did)
    export D_ID
endif

ifeq ($(port),)
    PUBLIC_PORT   := 80
else
    PUBLIC_PORT   ?= $(port)
endif

# export such that its passed to shell functions for Docker to pick up.
# control alpine version from here
VERSION := 3.11.6
export VERSION
export PROJECT_NAME
export HOST_USER
export HOST_UID

# all our targets are phony (no files to check).
.PHONY: help init shell build-shell rebuild-shell service logini concat concat-all build-all run-all rerun-all make-statoshi run-statoshi extract concat-slim build-slim rebuild-slim run-slim concat-gui build-gui rebuild-gui run-gui test-gui autogen depends config doc concat package-all package-gui package-slim d-ps d-images d-exec torproxy get-branches

# suppress make's own output
#.SILENT:

help:
	@echo ''
	@echo ''
	@echo '	Docker: make [TARGET] [EXTRA_ARGUMENTS]'
	@echo '	Shell:'
	@echo '		make shell user=root'
	@echo '		make shell user=$(HOST_USER)'
	@echo ''
	@echo '	[TARGET]:'
	@echo ''
	@echo '		build-all	complete build - no deploy'
	@echo '		run-all  	deploy build-all product'
	@echo ''
	@echo '		build-slim	build with signed precompiled statoshi binaries'
	@echo '		run-slim	deploy build-slim product'
	@echo ''
	@echo '	[EXTRA_ARGUMENTS]: push a shell command to the container'
	@echo ''
	@echo '		cmd=:	'
	@echo '		     	    make run-all cmd="bitcoind"'
	@echo '		d=:  	'
	@echo '		     	    make shell   d="--prune=550"'
	@echo ''
	@echo ''

# Some handy docker commands
d-ps:
	@echo ''
	bash -c 'docker ps'
	@echo ''
d-images:
	@echo ''
	bash -c 'docker images'
	@echo ''
d-exec:
		bash -c './docker/d-exec.sh'
cli-exec:
		bash -c './docker/cli-exec.sh'

#######################
# Backup $HOME/.bitcoin
########################
TIME=$(shell date +%s)
export TIME
backup:
	@echo ''
	bash -c 'mkdir -p $(HOME)/.bitcoin'
	bash -c 'conf/get_size.sh'
	bash -c 'tar czv --exclude=*.log --exclude=banlist.dat \
			--exclude=fee_exstimates.dat --exclude=mempool.dat \
			--exclude=peers.dat --exclude=.cookie --exclude=database \
			--exclude=.lock --exclude=.walletlock --exclude=.DS_Store\
			-f $(HOME)/.bitcoin-$(TIME).tar.gz $(HOME)/.bitcoin'
	bash -c 'md5sum $(HOME)/.bitcoin-$(TIME).tar.gz > $(HOME)/bitcoin-$(TIME).tar.gz.md5'
	bash -c 'md5sum -c $(HOME)/bitcoin-$(TIME).tar.gz.md5'
	@echo ''

#######################
# Shared volume for datadir persistance
# We fastcopy user's bitcoin datadir when sharing $HOME with container
########################
init:
	@echo ''
	bash -c 'mkdir -p $(BITCOIN_DATA)'
	bash -c 'test -d $(BLOCK_DATA_BAK) && echo Exists || ./conf/usr/local/bin/fastcopy-chaindata.py $(BITCOIN_DATA)  $(BLOCK_DATA_BAK)'
	@echo ''
#######################
# Docker file creation...
########################
concat-all: init
	@echo ''
	bash -c '$(pwd) cat ./docker/header               > $(DOCKERFILE)'
	bash -c '$(pwd) cat ./docker/statoshi.all        >> $(DOCKERFILE)'
	bash -c '$(pwd) cat ./docker/footer              >> $(DOCKERFILE)'
	bash -c '$(pwd) cat ./docker/torproxy             > torproxy'
	@echo ''
#######################
concat-slim:
	@echo ''
	bash -c '$(pwd) cat ./docker/header               > $(DOCKERFILE).slim'
	bash -c '$(pwd) cat ./docker/statoshi.slim       >> $(DOCKERFILE).slim'
	bash -c '$(pwd) cat ./docker/footer              >> $(DOCKERFILE).slim'
	@echo ''
#######################
concat: concat-all concat-slim concat-gui
	@echo ''
	bash -c ' install -v ./docker/docker-compose.yml .'
	bash -c ' install -v ./docker/shell .'
	@echo ''
#######################
build-shell: concat-all
	@echo ''
	docker-compose --verbose build shell
	@echo ''
#######################
rebuild-shell: concat-all
	@echo ''
	docker-compose --verbose build --no-cache shell
	@echo ''
#######################
shell: build-shell
ifeq ($(CMD_ARGUMENTS),)
	# no command is given, default to shell
	@echo ''
	docker-compose --verbose -p $(PROJECT_NAME)_$(HOST_UID) run --rm shell sh
	@echo ''
else
	# run the command
	@echo ''
	docker-compose --verbose -p $(PROJECT_NAME)_$(HOST_UID) run --rm shell sh -c "$(CMD_ARGUMENTS)"
	@echo ''
endif
#######################
autogen: concat-all
	# here it is useful to add your own customised tests
	@echo ''
	docker-compose --verbose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run --rm statoshi sh -c "cd /home/root/stats.bitcoincore.dev  && ./autogen.sh && exit"
	@echo ''
#######################
config: autogen
	@echo ''
	docker-compose --verbose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run --rm statoshi sh -c "cd /home/root/stats.bitcoincore.dev  && ./configure --disable-wallet --disable-tests --disable-hardening --disable-man --enable-util-cli --enable-util-tx --with-gui=no --without-miniupnpc --disable-bench && exit"
	@echo ''
#######################
depends: config
	@echo ''
	docker-compose --verbose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run --rm statoshi sh -c "apk add coreutils && exit"
	@echo ''
	docker-compose --verbose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run --rm statoshi sh -c "make -j $(nproc) download -C /home/root/stats.bitcoincore.dev/depends && exit"
	@echo ''
#######################
test:
	@echo ''
	docker-compose --verbose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run -d --rm shell sh -c '\
	echo "I am `whoami`. My uid is `id -u`." && echo "Docker runs!"' \
	&& echo success
	@echo ''
#######################
make-statoshi: depends
	@echo ''
	docker-compose --verbose -p $(PROJECT_NAME)_$(HOST_UID) run --rm statoshi sh -c "cd /home/root/stats.bitcoincore.dev && make install && exit"
	@echo ''
#######################
run-statoshi: make-statoshi
	@echo ''
	docker-compose build statoshi
	@echo ''
ifeq ($(CMD_ARGUMENTS),)
	@echo ''
	docker-compose --verbose -p $(PROJECT_NAME)_$(HOST_UID) run -d --rm statoshi sh
	@echo ''
else
	@echo ''
	docker-compose --verbose -p $(PROJECT_NAME)_$(HOST_UID) run -d --rm statoshi sh -c "$(CMD_ARGUMENTS)"
	@echo ''
endif
#######################
service:
	# run as a (background) service
	@echo ''
	docker-compose --verbose -p $(PROJECT_NAME)_$(HOST_UID) up -d shell
	@echo ''
#######################
login: service
	# run as a service and attach to it
	@echo ''
	docker exec -it $(PROJECT_NAME)_$(HOST_UID) sh
	@echo ''
########################
build-all: concat-all
	@echo ''
	docker-compose --verbose -f docker-compose.yml build statoshi
	@echo ''
#######################
rebuild-all: concat
	@echo ''
	docker-compose --verbose -f docker-compose.yml build --no-cache statoshi
	@echo ''
#######################
run-all: build-all
ifeq ($(CMD_ARGUMENTS),)
	@echo ''
	docker-compose --verbose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run -d --publish $(PUBLIC_PORT):3000 --publish 8125:8125 --publish 8126:8126 --publish 8333:8333 --rm statoshi sh
	@echo ''
else
	@echo ''
	docker-compose --verbose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run -d --publish $(PUBLIC_PORT):3000 --publish 8125:8125 --publish 8126:8126 --publish 8333:8333 --rm statoshi sh -c "$(CMD_ARGUMENTS)"
	@echo ''
endif
	@echo 'Give grafana a few minutes to set up...'
	@echo 'http://localhost:$(PUBLIC_PORT)'
#######################
rerun-all: rebuild-all
ifeq ($(CMD_ARGUMENTS),)
	@echo ''
	docker-compose --verbose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run -d --publish $(PUBLIC_PORT):3000 --publish 8125:8125 --publish 8126:8126 --publish 8333:8333 --rm statoshi sh
	@echo ''
else
	@echo ''
	docker-compose --verbose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run -d --publish $(PUBLIC_PORT):3000 --publish 8125:8125 --publish 8126:8126 --publish 8333:8333 --rm statoshi sh -c "$(CMD_ARGUMENTS)"
	@echo ''
endif
#######################
extract: concat
	#extract TODO CREATE PACKAGE for distribution
	sed '$d' $(DOCKERFILE) | sed '$d' | sed '$d' > $(DOCKERFILE_EXTRACT)
	docker build -f $(DOCKERFILE_EXTRACT) --rm -t $(DOCKERFILE_EXTRACT) .
	docker run --name $(DOCKERFILE_EXTRACT) $(DOCKERFILE_EXTRACT) /bin/true
	docker rm $(DOCKERFILE_EXTRACT)
	rm -f  $(DOCKERFILE_EXTRACT)
#######################
build-slim: concat
	@echo ''
	docker-compose --verbose -f docker-compose.yml -p stats.bitcoincore.dev build statoshi-slim
	@echo ''
#######################
rebuild-slim: concat
	@echo ''
	docker-compose --verbose -f docker-compose.yml -p stats.bitcoincore.dev build --no-cache statoshi-slim
	@echo ''
#######################
run-slim: build-slim
ifeq ($(CMD_ARGUMENTS),)
	@echo ''
	docker-compose --verbose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run --publish $(PUBLIC_PORT):3000 --publish 8080:8080 --publish 8125:8125 --publish 8333:8333 --publish 8126:8126 --rm statoshi-slim sh
	@echo ''
else
	@echo ''
	docker-compose --verbos e-f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run --publish $(PUBLIC_PORT):3000 --publish 8080:8080 --publish 8125:8125 --publish 8126:8126 --publish 8333:8333 --rm statoshi-slim sh -c "$(CMD_ARGUMENTS)"
	@echo ''
endif
#######################
torproxy: concat-all
#REF: https://hub.docker.com/r/dperson/torproxy
	bash -c 'docker run -it -p 8118:8118 -p 9050:9050 -d dperson/torproxy'
#	@echo ''
#	docker-compose --verbose  -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run --publish 8118:8118  --publish 9050:9050  --publish 9051:9051 --rm torproxy sh -c "$(CMD_ARGUMENTS)"
#	@echo ''

#######################
get-branches:
		bash -c ./conf/usr/local/bin/get-branches.sh
#######################
clean:
	@docker-compose -p $(PROJECT_NAME)_$(HOST_UID) down --remove-orphans --rmi all 2>/dev/null \
	&& echo 'Image(s) for "$(PROJECT_NAME):$(HOST_USER)" removed.' \
	|| echo 'Image(s) for "$(PROJECT_NAME):$(HOST_USER)" already removed.'
	rm -f $(DOCKERFILE)*
	rm -f shell
	rm -f gui
	rm -f statoshi
	rm -f stats.build.*
#######################
prune:
	docker system prune -af
#######################
doc:
	export HOST_USER=root
	export HOST_UID=0
	bash -c '$(pwd) make user=root'
	bash -c 'cat README > README.md'
	bash -c 'cat ./docker/Docker.md >> README.md'
	bash -c '$(pwd) make user=root  >> README.md'
#######################
package-all: clean build-all
	bash -c 'cat ~/GH_TOKEN.txt | docker login docker.pkg.github.com -u RandyMcMillan --password-stdin'
	bash -c 'docker tag $(PROJECT_NAME):$(HOST_USER) docker.pkg.github.com/bitcoincore-dev/stats.bitcoincore.dev/$(notdir $(PWD)):$(VERSION)'
	bash -c 'docker push docker.pkg.github.com/bitcoincore-dev/stats.bitcoincore.dev/$(notdir $(PWD)):$(VERSION)'
#######################
package-gui: clean build-gui
	bash -c 'cat ~/GH_TOKEN.txt | docker login docker.pkg.github.com -u RandyMcMillan --password-stdin'
	bash -c 'docker tag $(PROJECT_NAME):$(HOST_USER) docker.pkg.github.com/bitcoincore-dev/stats.bitcoincore.dev/$(notdir $(PWD)).gui:$(VERSION)'
	bash -c 'docker push docker.pkg.github.com/bitcoincore-dev/stats.bitcoincore.dev/$(notdir $(PWD)).gui:$(VERSION)'
#######################
package-slim: clean build-slim
	bash -c 'cat ~/GH_TOKEN.txt | docker login docker.pkg.github.com -u RandyMcMillan --password-stdin'
	bash -c 'docker tag $(PROJECT_NAME):$(HOST_USER) docker.pkg.github.com/bitcoincore-dev/stats.bitcoincore.dev/$(notdir $(PWD)).slim:$(VERSION)'
	bash -c 'docker push docker.pkg.github.com/bitcoincore-dev/stats.bitcoincore.dev/$(notdir $(PWD)).slim:$(VERSION)'
#######################
-include Makefile

