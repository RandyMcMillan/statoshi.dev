# If you see pwd_unknown showing up, this is why. Re-calibrate your system.
PWD ?= pwd_unknown

# The repo may contain a Makefile generated by ./configure
# We include Makefile at the end of this GNUmakefile
ifneq ($(PWD)/Makefile,)
MAKEFILE := $(PWD)/Makefile
endif

# PROJECT_NAME defaults to name of the current directory.
PROJECT_NAME := $(notdir $(PWD))
THIS_FILE := ${PWD}/$(lastword $(MAKEFILE_LIST))

#These are referenced here and docker-compose.yml
DOCKERFILE         := ${PWD}/$(notdir $(PWD))
DOCKERFILE_SLIM    := ${PWD}/$(notdir $(PWD)).slim
DOCKERFILE_GUI     := ${PWD}/$(notdir $(PWD)).gui
DOCKERFILE_SHELL   := ${PWD}/shell

DOCKER_COMPOSE     := ${PWD}/docker-compose.yml

# Note the different service configs in  docker-compose.yml.
# We override this default for different build/run configs
SERVICE_TARGET     := shell

ifeq ($(user),)
# USER retrieved from env, UID from shell.
HOST_USER          ?= $(strip $(if $(USER),$(USER),nodummy))
HOST_UID           ?= $(strip $(if $(shell id -u),$(shell id -u),4000))
else
# allow override by adding user= and/ or uid=  (lowercase!).
# uid= defaults to 0 if user= set (i.e. root).
HOST_USER           = $(user)
HOST_UID            = $(strip $(if $(uid),$(uid),0))
endif

CMD_ARGUMENTS  ?= $(cmd)
D_ARGUMENTS    ?= $(d)
CLI_ARGUMENTS  ?= $(cli)

# export such that its passed to shell functions for Docker to pick up.
VERSION=3.11.6
export VERSION
export PROJECT_NAME
export HOST_USER
export HOST_UID

#
BITCOIND="${PWD}/conf/usr/local/bin/./bitcoind"

# all our targets are phony (no files to check).
.PHONY: help init shell compose-shell recompose-shell service login concat-all compose-all recompose-all run-all rerun-all make-statoshi run-statoshi extract concat-slim build-slim rebuild-slim run-slim concat-gui build-gui rebuild-gui run-gui test-gui autogen depends config doc concat package-all package-gui package-slim backup

# suppress make's own output
#.SILENT:

help: init concat
	@echo ''
	@echo '	Docker:'
	@echo '		make [TARGET] [ARGS]'
	@echo ''
	@echo '	Shell:'
	@echo '		make shell user=$(HOST_USER)'
	@echo ''
	@echo '	Targets:'
	@echo ''
	@echo '		build-all complete build - no deploy'
	@echo '		run-all  	deploy build-all product'
	@echo ''
	@echo '		build-slim	build with signed precompiled statoshi binaries'
	@echo '		run-slim	deploy build-slim product'
	@echo ''
	@echo '	ARGS:'
	@echo ''
	@echo '	CMD:'
	@echo '		push a shell command to the container'
	@echo ''
	@echo '		cmd=:	'
	@echo '		     	   make shell cmd="whoami"'
	@echo '	D:         push a bitcoind command to the container'
	@echo '		d=:  	'
	@echo '		     	   make shell   d="--prune=550"'
	@echo ''
	@echo '	USER:       '
	@echo '	           make            '
	@echo '	           make user=<user>'
	@echo '	                            result: $(PROJECT_NAME)_$(HOST_UID)'
	@echo ''
	@echo ''
	@echo '	PROJECT_NAME         = ${PROJECT_NAME}'
	@echo ''
	@echo ''
	@echo '	PWD                  = ${PWD}'
	@echo '	THIS_FILE            = ${THIS_FILE}'
	@echo ''
	@echo '	DOCKERFILE           = ${DOCKERFILE}'
	@echo '	DOCKERFILE_SLIM      = ${DOCKERFILE_SLIM}'
	@echo '	DOCKERFILE_GUI       = ${DOCKERFILE_GUI}'
	@echo '	DOCKERFILE_SHELL     = ${DOCKERFILE_SHELL}'
	@echo ''
	@echo '	DOCKER_COMPOSE       = ${DOCKER_COMPOSE}'
	@echo ''
	@echo '	SERVICE_TARGET       = ${SERVICE_TARGET} (default)'
	@echo ''
	@echo '	HOST_USER            = ${HOST_USER}'
	@echo '	HOST_UID             = ${HOST_UID}'
	@echo ''
	@echo '	CMD_ARGUMENTS        = ${CMD_ARGUMENTS}'
	@echo '	                       make shell cmd="${CMD_ARGUMENTS}"'
	@echo ''
	@echo '	D_ARGUMENTS          = ${D_ARGUMENTS}'
	@echo '	                       make shell d="${D_ARGUMENTS}"'
	@echo ''
	@echo '	CLI_ARGUMENTS        = ${CLI_ARGUMENTS}'
	@echo ''
	@echo '### EXAMPLES:	'
	@echo '``````'
	@echo 'make shell user=$(user) d="${D_ARGUMENTS}" cmd="${CMD_ARGUMENTS}"   '
	@echo 'make build-all user=$(user) d="${D_ARGUMENTS}" cmd="${CMD_ARGUMENTS}"   '
	@echo 'make run-all user=$(user) d="${D_ARGUMENTS}" cmd="${CMD_ARGUMENTS}"   '
ifneq (${MAKEFILE},)
	@echo '${MAKEFILE} exists...'
	@echo 'make -f ${MAKEFILE} clean'
endif
	@echo ''
	@echo '``````'
	@echo ''
CMD_ARGUMENTS  ?= $(cmd)
D_ARGUMENTS    ?= $(d)
CLI_ARGUMENTS  ?= $(cli)

#######################
# Backup $HOME/.bitcoin
########################
TIME=$(shell date +%s)
export TIME
backup:
	@echo ''
	bash -c 'mkdir -p $(HOME)/.bitcoin'
	bash -c 'conf/get_size.sh'
	bash -c 'tar czv --exclude=*.log --exclude=banlist.dat \
			--exclude=fee_exstimates.dat --exclude=mempool.dat \
			--exclude=peers.dat --exclude=.cookie --exclude=database \
			--exclude=.lock --exclude=.walletlock --exclude=.DS_Store\
			-f $(HOME)/.bitcoin-$(TIME).tar.gz $(HOME)/.bitcoin'
	bash -c 'md5sum $(HOME)/.bitcoin-$(TIME).tar.gz > $(HOME)/bitcoin-$(TIME).tar.gz.md5'
	bash -c 'md5sum -c $(HOME)/bitcoin-$(TIME).tar.gz.md5'
	@echo ''
init:
	@echo ''
	@echo   'mkdir -p $(HOME)/.bitcoin'
	bash -c 'mkdir -p $(HOME)/.bitcoin'
	bash -c 'conf/get_size.sh'
	@echo   'Installing $(HOME)/stats.bitcoincore.dev/conf/bitcoin.conf $(HOME)/.bitcoin'
	bash -c 'install -v conf/bitcoin.conf $(HOME)/.bitcoin'
	@echo ''
#######################
# Docker file creation...
########################
concat-all:
	@echo ''
	bash -c '$(pwd) cat ./docker/header               > $(DOCKERFILE)'
	bash -c '$(pwd) cat ./docker/statoshi.all        >> $(DOCKERFILE)'
	bash -c '$(pwd) cat ./docker/footer              >> $(DOCKERFILE)'
	@echo ''
#######################
concat-slim:
	@echo ''
	bash -c '$(pwd) cat ./docker/header               > $(DOCKERFILE).slim'
	bash -c '$(pwd) cat ./docker/statoshi.slim       >> $(DOCKERFILE).slim'
	bash -c '$(pwd) cat ./docker/footer              >> $(DOCKERFILE).slim'
	@echo ''
#######################
concat-gui:
	@echo ''
	bash -c '$(pwd) cat ./docker/header.slim          > $(DOCKERFILE).gui'
	bash -c '$(pwd) cat ./docker/gui                 >> $(DOCKERFILE).gui'
	bash -c '$(pwd) cat ./docker/footer              >> $(DOCKERFILE).gui'
	@echo ''
#######################
concat: init concat-all concat-slim concat-gui
	@echo ''
	bash -c ' install -v ./docker/docker-compose.yml .'
	bash -c ' install -v ./docker/shell .'
	@echo ''
#######################
compose-shell: init concat
	docker-compose build shell
#######################
recompose-shell: init concat
	docker-compose build --no-cache shell
#######################
shell:

ifeq ($(D_ARGUMENTS),)
# NO D_ARGUMENTS
ifeq ($(CMD_ARGUMENTS),)
# NO CMD_ARGUMENTS
		docker-compose -p $(PROJECT_NAME)_$(HOST_UID) run --rm shell sh
else
# CMD_ARGUMENTS
		docker-compose -p $(PROJECT_NAME)_$(HOST_UID) run --rm shell sh -c "$(CMD_ARGUMENTS)"
endif

else
#D_ARGUMENTS
ifeq ($(CMD_ARGUMENTS),)
# NO CMD_ARGUMENTS
	# no command is given, default to shell
		docker-compose -p $(PROJECT_NAME)_$(HOST_UID) run --rm shell sh -c "/home/root/stats.bitcoincore.dev/conf/usr/local/bin/./bitcoind $(D_ARGUMENTS)"
else
# CMD_ARGUMENTS && D_ARGUMENTS
		docker-compose -p $(PROJECT_NAME)_$(HOST_UID) run --rm shell sh -c "$(CMD_ARGUMENTS) && /home/${HOST_USER}/stats.bitcoincore.dev/conf/usr/local/bin/./bitcoind $(D_ARGUMENTS)"
endif

endif

#######################
service:
	# run as a (background) service
	docker-compose -p $(PROJECT_NAME)_$(HOST_UID) up -d shell
#######################
login: service
	# run as a service and attach to it
	docker exec -it $(PROJECT_NAME)_$(HOST_UID) sh
########################
compose-all: concat
	docker-compose build statoshi
#######################
recompose-all: concat
	docker-compose build --no-cache statoshi
#######################
run-all: compose-all
ifeq ($(CMD_ARGUMENTS),)
	docker-compose -p $(PROJECT_NAME)_$(HOST_UID) run --publish 3000:3000 --publish 8080:8080 --publish 8125:8125 --publish 8126:8126 --rm statoshi sh
else
	docker-compose -p $(PROJECT_NAME)_$(HOST_UID) run --publish 3000:3000 --publish 8080:8080 --publish 8125:8125 --publish 8126:8126 --rm statoshi sh -c "$(CMD_ARGUMENTS)"
endif
#######################
rerun-all: recompose-all
ifeq ($(CMD_ARGUMENTS),)
	docker-compose -p $(PROJECT_NAME)_$(HOST_UID) run --publish 3000:3000 --publish 8080:8080 --publish 8125:8125 --publish 8126:8126 --rm statoshi sh
else
	docker-compose -p $(PROJECT_NAME)_$(HOST_UID) run --publish 3000:3000 --publish 8080:8080 --publish 8125:8125 --publish 8126:8126 --rm statoshi sh -c "$(CMD_ARGUMENTS)"
endif
#######################
extract: concat
	#extract TODO CREATE PACKAGE for distribution
	sed '$d' $(DOCKERFILE) | sed '$d' | sed '$d' > $(DOCKERFILE_EXTRACT)
	docker build -f $(DOCKERFILE_EXTRACT) --rm -t $(DOCKERFILE_EXTRACT) .
	docker run --name $(DOCKERFILE_EXTRACT) $(DOCKERFILE_EXTRACT) /bin/true
	docker rm $(DOCKERFILE_EXTRACT)
	rm -f  $(DOCKERFILE_EXTRACT)
#######################
build-slim: concat
	docker-compose -f docker-compose.yml -p stats.bitcoincore.dev build statoshi-slim
#######################
rebuild-slim: concat
	docker-compose -f docker-compose.yml -p stats.bitcoincore.dev build --no-cache statoshi-slim
#######################
run-slim: build-slim
ifeq ($(CMD_ARGUMENTS),)
	#docker-compose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run -d --publish 3000:3000 --publish 8080:8080 --publish 8125:8125 --publish 8126:8126 --rm statoshi-slim sh
	docker-compose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run --publish 3000:3000 --publish 8080:8080 --publish 8125:8125 --publish 8126:8126 --rm statoshi-slim sh
	#docker-compose up -d -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) --publish 3000:3000 --publish 8080:8080 --publish 8125:8125 --publish 8126:8126 --rm statoshi-slim
else
	#docker-compose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run -d --publish 3000:3000 --publish 8080:8080 --publish 8125:8125 --publish 8126:8126 --rm statoshi-slim sh -c "$(CMD_ARGUMENTS)"
	docker-compose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run --publish 3000:3000 --publish 8080:8080 --publish 8125:8125 --publish 8126:8126 --rm statoshi-slim sh -c "$(CMD_ARGUMENTS)"
	#docker-compose up -d -f docker-compose.yml up -d -p $(PROJECT_NAME)_$(HOST_UID) --publish 3000:3000 --publish 8080:8080 --publish 8125:8125 --publish 8126:8126 --rm statoshi-slim run sh -c "$(CMD_ARGUMENTS)"
endif
#######################
build-gui: concat
	docker-compose -f docker-compose.yml -p $(PROJECT_NAME) build gui
	@echo ''
#######################
rebuild-gui: concat
	docker-compose -f docker-compose.yml -p $(PROJECT_NAME) build --no-cache gui
	@echo ''
#######################
run-gui: build-gui
ifeq ($(CMD_ARGUMENTS),)
	docker-compose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run -d --publish 80:3000 --rm gui sh
	@echo ''
else
	docker-compose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run -d --publish 80:3000 --rm gui sh -c "$(CMD_ARGUMENTS)"
	@echo ''
endif
#######################
test-gui: build-gui
	docker-compose -f docker-compose.yml -p $(PROJECT_NAME)_$(HOST_UID) run -d --publish 3333:3000 --rm gui sh -c '\
		echo "I am `whoami`. My uid is `id -u`." && echo "Docker runs!"' \
	&& echo success
#######################
clean:
	@echo ''
ifneq (${MAKEFILE},)
	@echo '${MAKEFILE} exists...'
	rm -f ${MAKEFILE}
endif
	@echo '#########################################'
	@echo ''
	@echo 'Cleaning $(PROJECT_NAME) created assets...'
	@docker-compose -p $(PROJECT_NAME)_$(HOST_UID) down --remove-orphans --rmi all 2>/dev/null \
	&& echo 'Image(s) for "$(PROJECT_NAME):$(HOST_USER)" removed.' \
	|| echo 'Image(s) for "$(PROJECT_NAME):$(HOST_USER)" already removed.'
	rm -f $(DOCKERFILE)*
	rm -f $(DOCKERFILE_SLIM)
	rm -f $(DOCKERFILE_GUI)
	rm -f $(DOCKERFILE_SHELL)
	@echo ''
	@echo '#########################################'
#######################
prune:
	docker system prune -af
#######################
doc:
	export HOST_USER=root
	export HOST_UID=0
	bash -c '$(pwd) make user=root'
	bash -c 'cat README > README.md'
	bash -c 'cat ./docker/Docker.md >> README.md'
	bash -c '$(pwd) make user=root  >> README.md'
#######################
package-all: build-all
	bash -c 'cat ~/GH_TOKEN.txt | docker login docker.pkg.github.com -u RandyMcMillan --password-stdin'
	bash -c 'docker tag $(PROJECT_NAME):$(HOST_USER) docker.pkg.github.com/bitcoincore-dev/stats.bitcoincore.dev/$(notdir $(PWD)):$(VERSION)'
	bash -c 'docker push docker.pkg.github.com/bitcoincore-dev/stats.bitcoincore.dev/$(notdir $(PWD)):$(VERSION)'
#######################
package-gui: build-gui
	bash -c 'cat ~/GH_TOKEN.txt | docker login docker.pkg.github.com -u RandyMcMillan --password-stdin'
	bash -c 'docker tag $(PROJECT_NAME):$(HOST_USER) docker.pkg.github.com/bitcoincore-dev/stats.bitcoincore.dev/$(notdir $(PWD)).gui:$(VERSION)'
	bash -c 'docker push docker.pkg.github.com/bitcoincore-dev/stats.bitcoincore.dev/$(notdir $(PWD)).gui:$(VERSION)'
#######################
package-slim: build-slim
	bash -c 'cat ~/GH_TOKEN.txt | docker login docker.pkg.github.com -u RandyMcMillan --password-stdin'
	bash -c 'docker tag $(PROJECT_NAME):$(HOST_USER) docker.pkg.github.com/bitcoincore-dev/stats.bitcoincore.dev/$(notdir $(PWD)).slim:$(VERSION)'
	bash -c 'docker push docker.pkg.github.com/bitcoincore-dev/stats.bitcoincore.dev/$(notdir $(PWD)).slim:$(VERSION)'
#######################
push-all:
		bash -c 'git push origin   --all'
		bash -c 'git push statoshi --all'




# if $(pwd)/.configure has been run the bitcoin Makefile will exist
-include Makefile

